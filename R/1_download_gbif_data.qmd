---
title: "Download GBIF data"
author: "Brunno F Oliveira"
format: 
  html:
    toc: true
    toc_float: true
    number_sections: true
    code_folding: hide
editor: source
---

# Load libraries
```{r message=FALSE, warning=FALSE}
rm(list=ls())
gc()
```

oi
```{r message=FALSE, warning=FALSE}
# devtools::install_github("ropensci/CoordinateCleaner")

list.of.packages <- c("stringr", "crul", "tidyr", "here", "pbapply",
                      "parallel", "pbapply", "readxl","dplyr",
                      "data.table", "ggplot2", "knitr", "kableExtra",
                      "CoordinateCleaner", 
                      "rgbif", "raster", "terra","rnaturalearthdata",
                      "jsonlite","devtools")

new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]

if(length(new.packages)) install.packages(new.packages)

sapply(list.of.packages, require, character.only = TRUE)
```

```{r eval=FALSE}
gbif_cred <- read.table(here("MyGbifCredentials.txt"),header = TRUE)
```

# Get land shp file
```{r eval=FALSE}
land <- rnaturalearth::ne_coastline(scale = 50,returnclass = "sv")
```

# Get species list 
```{r eval=FALSE}
sps_list <- read_xlsx(here("Data/trait_species.xlsx"))

# Fix
sps_list$name_clean <- sapply(sps_list$taxonname, function(x){
  tmp <- strsplit(x," ")[[1]]
  if(length(tmp)==2){
    paste(str_to_title(tmp[1]),tolower(tmp[2]))
  } else {
    paste(str_to_title(tmp[1]),tolower(tmp[2]),tolower(tmp[3]))
  }
})
```

# Get species accepted name on GBIF
```{r eval=FALSE}
sps_names_accepted <- pblapply(sps_list$name_clean, function(x){
  data.frame(requested_name = x, 
             rgbif::name_backbone(x))
})
sps_names_accepted <- rbindlist(sps_names_accepted, fill=TRUE)
sps_list$AcceptedName <- sps_names_accepted$species
sps_list$AcceptedNameKey <- sps_names_accepted$speciesKey

# save specis list with accepted names
write.csv(sps_list, 
          here("Data/sps_list_w_accepted_names.csv"), 
          row.names = FALSE)

# sps_list <- read.csv(here("Data/sps_list_w_accepted_names.csv"))
```

# Download GBIF occurrences
```{r eval=FALSE}
# columns of interest
col_interest <- c("species","decimalLatitude","decimalLongitude",
                  "basisOfRecord","speciesKey","iucnRedListCategory",
                  "kingdom", "phylum", "order", "family")

# download GBIF occurrences
sps_occ_raw <- pblapply(sps_list$AcceptedNameKey, function(x){
  tmp <- occ_search(x,
                    hasCoordinate = TRUE,
                    hasGeospatialIssue = FALSE,
                    occurrenceStatus = "PRESENT")$data
  tmp <- tmp[,which(names(tmp)%in%col_interest)]
  return(tmp)
})

sps_occ_raw <- rbindlist(sps_occ_raw, fill = TRUE)

# save raw data
write.csv(sps_occ_raw, 
          here("Data/sps_gbif_raw_data.csv"), 
          row.names = FALSE)
```


```{r eval=FALSE}
# sps_occ_raw <- read.csv(here("Data/sps_gbif_raw_data.csv"))
```

# Clean occurrences
This removes duplicates and other potentially erroneous coordinates
```{r eval=FALSE}

sps_occ <- sps_occ_raw

# 1) remove duplicated (same species and same coordidates)
rem <- which(duplicated(sps_occ_raw[,c("species","decimalLatitude","decimalLongitude")]))
if(length(rem)>0){
  sps_occ <- sps_occ_raw[-rem,]  
}

# 2) use CoordinateCleaner to remove potential mistakes
sps_occ <- CoordinateCleaner::clean_coordinates(
  x = sps_occ,
  lon = "decimalLongitude",
  lat = "decimalLatitude",
  tests = c("capitals", "centroids", "equal",
            "gbif", "institutions", "zeros"),
  value = "clean")

# remove occurrences falling on land
test.seas <- CoordinateCleaner::clean_coordinates(
  x = sps_occ,
  lon = "decimalLongitude",
  lat = "decimalLatitude",
  tests = "seas")

# get only coordinates in the ocean
sps_occ <- sps_occ[-which(test.seas$.sea),]

# test <- vect(data.frame(sps_occ), 
#              geom = c("decimalLongitude","decimalLatitude"))
# plot(test);plot(land,add=TRUE)

# save clean data
write.csv(sps_occ, 
          here("Data/sps_gbif_clean_data.csv"), 
          row.names = FALSE)
```


```{r }
sps_occ <- read.csv(here("Data/sps_gbif_clean_data.csv"))
```

# Get stats
```{r}

N_occ <- sps_occ |>
  group_by(species) |>
  summarise(N = length(species))

N_occ %>%
  rename("Species name" = species) %>%
  kbl(caption = "Number of GBIF cleanned occurrence records per species") %>%
  kable_classic(full_width = F, html_font = "Cambria")

ggplot(N_occ, aes(y = reorder(species, N), x = N))+
  geom_bar(stat = "identity")+
  theme_classic()+
  labs(x = "Number of cleaned GBIF occurrences",
       y = "Species name")

```



